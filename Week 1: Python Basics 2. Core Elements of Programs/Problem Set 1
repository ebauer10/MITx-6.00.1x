#Problem 1
#0.0/10.0 points (graded)
#Assume s is a string of lower case characters.

#Write a program that counts up the number of vowels contained in the string s. Valid vowels are: 'a', 'e', 'i', 'o', and 'u'. 
#For example, if s = 'azcbobobegghakl', your program should print:
#Number of vowels: 5

numvow = 0
for letter in s:
  if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':
    numvow += 1
print('Number of vowels: ', numvow)

#Problem 2
#0.0/10.0 points (graded)
#Assume s is a string of lower case characters.

#Write a program that prints the number of times the string 'bob' occurs in s. 
#For example, if s = 'azcbobobegghakl', then your program should print
#Number of times bob occurs is: 2

numbob = 0
for set in range(len(s)):
  if s[set:set+3] == 'bob':
    numbob += 1
print('Number of times bob occurs is: ', numbob)

#Problem 3
#0.0/15.0 points (graded)
#Assume s is a string of lower case characters.

#Write a program that prints the longest substring of s in which the letters occur in alphabetical order. 
#For example, if s = 'azcbobobegghakl', then your program should print

#Longest substring in alphabetical order is: beggh
#In the case of ties, print the first substring. For example, if s = 'abcbcd', then your program should print

#Longest substring in alphabetical order is: abc

maxlen = 0
currentsubstr = s[0]
longestsubstr = s[0]
for x in range(len(s)-1):
  if s[x+1] >= s[x]:
    currentsubstr += s[x+1]
    if len(currentsubstr) > maxlen:
      maxlen = len(currentsubstr)
      longestsubstr = currentsubstr
  else:
    currentsubstr = s[x+1]
  x += 1
print('Longest substring in alphabetical order is: ', longestsubstr)

#OR

# s is predefined variable set to a string value
current = ''
longest = ''
for i in range(len(s)):
 if (s[i] >= s[i-1]):
  current += s[i]
 else:
  current = s[i]
 if len(current) > len(longest):
  longest = current
print("Longest substring in alphabetical order is: " + longest)
