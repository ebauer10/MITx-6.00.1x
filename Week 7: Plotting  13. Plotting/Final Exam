#Final Exam
#Problem 3
trans = {'0': 'ling', '1': 'yi', '2': 'er', '3': 'san', '4': 'si',
         '5': 'wu', '6': 'liu', '7': 'qi', '8': 'ba', '9': 'jiu', '10': 'shi'}

def convert_to_mandarin(us_num):
    """
    us_num, a string representing a us number 0 to 99
    returns the string mandarin representation of us_num
    """
    if len(us_num) == 1 or us_num == '10':
        return trans.get(us_num)
    else:
        if us_num[0] == '1':
            return trans.get('10') + ' ' + trans.get(us_num[1])
        if us_num[1] != '0':
            return trans.get(us_num[0]) + ' ' + trans.get('10') + ' ' + trans.get(us_num[1])
        else:
            return trans.get(us_num[0]) + ' ' + trans.get('10')
          
 #Problem 4
 def is_list_permutation(L1, L2):
    """
    L1 and L2: lists containing integers and strings
    Returns False if L1 and L2 are not permutation of each other.
        If they are permutations of each other,
        returns a tuple of 3 times in this order:
        the element occuring most, how many times it occurs, and its type
    """
    #test if lists are empty
    if L1 == [] and L2 == []:
       return (None, None, None)
   
    #test to make sure L1 and L2 are permutations
    testList= []
    for item in L1:
        testList.append(item)
        
    for item in L2:
        if item in testList:
            testList.remove(item)
        else:
            return False
        
    if testList != []:
        return False
    
    #establish dictionary for key counters
    dictList = {}
    for item in L1:
        if item not in dictList:
            dictList[item] = 1
        else:
            dictList[item] += 1
    
    #find key with largest value and frequency
    mostOccuring = 0
    frequency = 0
    for item in dictList:
        if dictList[item] > frequency:
            mostOccuring = item
            frequency = dictList[item]
            
    #establish element type of key
    elementType = type(mostOccuring)
    
    #return desired elements in tuple
    return (mostOccuring, frequency, elementType)
   
   #Problem 5
   def uniqueValues(aDict):
    '''
    aDict: a dictionary
    returns: a sorted list of keys that map to unique aDict values, empty list if none
    '''
    # Your code here
    keyList = []
    keyDict = {}

    for key in list(aDict.keys()):
        if aDict[key] not in keyDict:
            keyDict[aDict[key]] = 1

        else:
            keyDict[aDict[key]] += 1

    for keyInkeyDict in keyDict.keys():
        if keyDict[keyInkeyDict] == 1:
            for keyInaDict in aDict.keys():
                if aDict[keyInaDict] == keyInkeyDict:
                    keyList.append(keyInaDict)

    return sorted(keyList)

#Problem 6
class Person(object):
    def __init__(self, name):
        self.name = name
    def say(self, stuff):
        return self.name + ' says: ' + stuff
    def __str__(self):
        return self.name
    
class Lecturer(Person):
    def lecture(self, stuff):
        return 'I believe that ' + Person.say(self, stuff)
    
class Professor(Lecturer):
    def say(self, stuff):
        return self.name + ' says: ' self.lecture(stuff)
    
class ArrogantProfessor(Professor):
    def lecture(self, stuff):
        return 'It is obvious that ' + Person.say(self, stuff)
    def say(self, stuff):
        return self.name + ' says: ' + self.lecture(stuff)

#Problem 7
class Container(object):
    """
    Holds hashable objects. Objects may ocur 0 or more times
    """
    def __init__(self):
        """
        Creates a new container with no objects in it. 
        I.e., any object occurs 0 times in self.
        """
        self.vals = {}
        
    def insert(self, e):
        """
        assumes e is hashable
        increases number of tmies e occurs in self by 1.
        """
        try:
            self.vals[e] += 1
        except:
            self.vals[e] = 1
            
    def __str__(self):
        s = ""
        for i in sorted(self.vals.keys()):
            if self.vals[i] != 0:
                s += str(i)+":"+str(self.vals[i])+"\n"
        return s
    
class Bag(Container):
    def remove(self, e):
        """
        assumes e is hashable
        if e occurs in self, reduces the number of times
        it occurs in self by 1. otherwise does nothing
        """
        try:
            self.vals[e] -= 1
        except:
            return 0
        
    def count(self, e):
        """
        assumes e is hashable
        returns the number of times e occurs in self.
        """
        try:
            return self.vals[e]
        except: 
            return 0
        
